{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cards","key","title","text","color","TogglerCard","_ref","_useState","useState","_useState2","Object","slicedToArray","setColor","react_default","a","createElement","react_draggable_default","axis","scale","defaultPosition","x","y","grid","bounds","left","right","onStop","e","card","lastX","Card","body","inverse","style","backgroundColor","borderColor","CardTitle","CardText","App","className","map","Row","Col","App_TogglerCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAIMA,EAAQ,CACZ,CACEC,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,IAET,CACEH,IAAK,EACLC,MAAO,0BACPC,KAAM,yEACNC,MAAO,KAILC,EAAc,SAAAC,GAAqB,IAAlBJ,EAAkBI,EAAlBJ,MAAOC,EAAWG,EAAXH,KAAWI,EACbC,mBAAS,IADIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChCH,EADgCK,EAAA,GACzBG,EADyBH,EAAA,GAavC,OACEI,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEG,KAAK,IACLC,MAAO,EACPC,gBAAiB,CAAEC,EAAG,EAAGC,EAAG,GAC5BC,KAAM,CAAC,GAAI,IACXC,OAAQ,CAAEC,MAAO,GAAIC,MAAO,IAC5BC,OAjBW,SAACC,EAAGC,GACbA,EAAKC,MAAQ,EACfjB,EAAS,UACAgB,EAAKC,MAAQ,EACtBjB,EAAS,WAETA,EAAS,MAaTC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,MAAI,EAACC,SAAO,EAAC5B,MAAOA,EAAO6B,MAAO,CAAEC,gBAAiB,OAAQC,YAAa,SAC9EtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KAAYlC,GACZW,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KAAWlC,MAoBJmC,EAdH,kBACVzB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,mBAEXvC,EAAMwC,IAAI,SAAAZ,GAAI,OACZf,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAKF,UAAU,MAAMtC,IAAK2B,EAAK3B,KAC7BY,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAKH,UAAU,wBACb1B,EAAAC,EAAAC,cAAC4B,EAAD,CAAazC,MAAO0B,EAAK1B,MAAOC,KAAMyB,EAAKzB,aCrFnCyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.08219fd8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport Draggable from 'react-draggable';\n\nconst cards = [\n  {\n    key: 1,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 2,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 3,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 4,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 5,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 6,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 7,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 8,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n  {\n    key: 9,\n    title: 'Special Title Treatment',\n    text: 'With supporting text below as a natural lead-in to additional content.',\n    color: \"\",\n  },\n];\n\nconst TogglerCard = ({ title, text }) => {\n  const [color, setColor] = useState('');\n\n  const onStop = (e, card) => {\n    if (card.lastX < 0) { // Left Toggle\n      setColor('danger');\n    } else if (card.lastX > 0) { // Right Toggle\n      setColor('success');\n    } else {\n      setColor('');\n    }\n  }\n\n  return (\n    <Draggable\n      axis=\"x\"\n      scale={1}\n      defaultPosition={{ x: 0, y: 0 }}\n      grid={[50, 50]}\n      bounds={{ left: -50, right: 50 }}\n      onStop={onStop}\n    >\n      <Card body inverse color={color} style={{ backgroundColor: '#333', borderColor: '#333' }}>\n        <CardTitle>{title}</CardTitle>\n        <CardText>{text}</CardText>\n      </Card>\n    </Draggable>\n  );\n}\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    {\n      cards.map(card => (\n        <Row className=\"m-2\" key={card.key}>\n          <Col className=\"col-md-6 offset-md-3\">\n            <TogglerCard title={card.title} text={card.text} />\n          </Col>\n        </Row>\n      ))\n    }\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}